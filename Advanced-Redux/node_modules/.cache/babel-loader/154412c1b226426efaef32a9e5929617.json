{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiSliceActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--; //existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiSliceActions.showNotification({\n      status: 'pending',\n      title: 'Sending cart request',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-course-190bc-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        dispatch(uiSliceActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Sending cart data failed!'\n        }));\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiSliceActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiSliceActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartSliceActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiSliceActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","error","cartSliceActions","actions"],"sources":["/home/kulandissa/Documents/ESTUDOS/udemy/reactjs/react-js-course/Advanced-Redux/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiSliceActions } from \"./ui-slice\";\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n    },\n    reducers: {\n        addItemToCart(state, action) {\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            state.totalQuantity++;\n            if (!existingItem) {\n                state.items.push({\n                    id: newItem.id,\n                    price: newItem.price,\n                    quantity: 1,\n                    totalPrice: newItem.price,\n                    name: newItem.title,\n                });\n            } else {\n                existingItem.quantity++;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n        },\n        removeItemFromCart(state, action) {\n            const id = action.payload;\n            const existingItem = state.items.find(item => item.id === id);\n            state.totalQuantity--;\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== id);\n            } else {\n                existingItem.quantity--;\n                //existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n        }\n    }\n});\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            uiSliceActions.showNotification({\n                status: 'pending',\n                title: 'Sending cart request',\n                message: 'Sending cart data!'\n            })\n        );\n\n        const sendRequest = async () => {\n            const response = await fetch('https://react-http-course-190bc-default-rtdb.firebaseio.com/cart.json', {\n                method: 'PUT',\n                body: JSON.stringify(cart)\n            })\n\n            if (!response.ok) {\n                dispatch(uiSliceActions.showNotification({\n                    status: 'error',\n                    title: 'Error!',\n                    message: 'Sending cart data failed!'\n                }))\n            }\n        };\n\n        try {\n            await sendRequest();\n\n            dispatch(uiSliceActions.showNotification({\n                status: 'success',\n                title: 'Success!',\n                message: 'Sent cart data successfully!'\n              }))\n            \n        } catch (error) {\n            dispatch(uiSliceActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Sending cart data failed!'\n              }))\n        }\n    }\n}\n\nexport const cartSliceActions = cartSlice.actions;\n\nexport default cartSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module"}