{"ast":null,"code":"import { uiSliceActions } from \"./ui-slice\";\nimport { cartSliceActions } from \"./cart-slice\";\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://react-http-course-190bc-default-rtdb.firebaseio.com/cart.json');\n\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartSliceActions.replaceCart(cartData));\n    } catch (error) {\n      dispatch(uiSliceActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiSliceActions.showNotification({\n      status: 'pending',\n      title: 'Sending cart request',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-course-190bc-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        dispatch(uiSliceActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Sending cart data failed!'\n        }));\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiSliceActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiSliceActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["uiSliceActions","cartSliceActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"sources":["/home/kulandissa/Documents/ESTUDOS/udemy/reactjs/react-js-course/Advanced-Redux/src/store/cart-actions.js"],"sourcesContent":["import { uiSliceActions } from \"./ui-slice\";\nimport { cartSliceActions } from \"./cart-slice\";\n\nexport const fetchCartData = () => {\n    return async (dispatch) => {\n        const fetchData = async () => {\n            const response = await fetch('https://react-http-course-190bc-default-rtdb.firebaseio.com/cart.json');\n            if (!response.ok) {\n                throw new Error('Could not fetch cart data!')\n            }\n            const data = await response.json();\n\n            return data;\n        };\n\n        try {\n            const cartData = await fetchData();\n            dispatch(cartSliceActions.replaceCart(cartData));\n        } catch (error) {\n            dispatch(uiSliceActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Sending cart data failed!'\n            }))\n        }\n    }\n}\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            uiSliceActions.showNotification({\n                status: 'pending',\n                title: 'Sending cart request',\n                message: 'Sending cart data!'\n            })\n        );\n\n        const sendRequest = async () => {\n            const response = await fetch('https://react-http-course-190bc-default-rtdb.firebaseio.com/cart.json', {\n                method: 'PUT',\n                body: JSON.stringify(cart)\n            })\n\n            if (!response.ok) {\n                dispatch(uiSliceActions.showNotification({\n                    status: 'error',\n                    title: 'Error!',\n                    message: 'Sending cart data failed!'\n                }))\n            }\n        };\n\n        try {\n            await sendRequest();\n\n            dispatch(uiSliceActions.showNotification({\n                status: 'success',\n                title: 'Success!',\n                message: 'Sent cart data successfully!'\n            }))\n\n        } catch (error) {\n            dispatch(uiSliceActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Sending cart data failed!'\n            }))\n        }\n    }\n}"],"mappings":"AAAA,SAASA,cAAT,QAA+B,YAA/B;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;EAC/B,OAAO,MAAOC,QAAP,IAAoB;IACvB,MAAMC,SAAS,GAAG,YAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uEAAD,CAA5B;;MACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;QACd,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;MACH;;MACD,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;MAEA,OAAOD,IAAP;IACH,CARD;;IAUA,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMP,SAAS,EAAhC;MACAD,QAAQ,CAACF,gBAAgB,CAACW,WAAjB,CAA6BD,QAA7B,CAAD,CAAR;IACH,CAHD,CAGE,OAAOE,KAAP,EAAc;MACZV,QAAQ,CAACH,cAAc,CAACc,gBAAf,CAAgC;QACrCC,MAAM,EAAE,OAD6B;QAErCC,KAAK,EAAE,QAF8B;QAGrCC,OAAO,EAAE;MAH4B,CAAhC,CAAD,CAAR;IAKH;EACJ,CArBD;AAsBH,CAvBM;AAyBP,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;EAClC,OAAO,MAAOhB,QAAP,IAAoB;IACvBA,QAAQ,CACJH,cAAc,CAACc,gBAAf,CAAgC;MAC5BC,MAAM,EAAE,SADoB;MAE5BC,KAAK,EAAE,sBAFqB;MAG5BC,OAAO,EAAE;IAHmB,CAAhC,CADI,CAAR;;IAQA,MAAMG,WAAW,GAAG,YAAY;MAC5B,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,uEAAD,EAA0E;QAClGe,MAAM,EAAE,KAD0F;QAElGC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;MAF4F,CAA1E,CAA5B;;MAKA,IAAI,CAACd,QAAQ,CAACE,EAAd,EAAkB;QACdJ,QAAQ,CAACH,cAAc,CAACc,gBAAf,CAAgC;UACrCC,MAAM,EAAE,OAD6B;UAErCC,KAAK,EAAE,QAF8B;UAGrCC,OAAO,EAAE;QAH4B,CAAhC,CAAD,CAAR;MAKH;IACJ,CAbD;;IAeA,IAAI;MACA,MAAMG,WAAW,EAAjB;MAEAjB,QAAQ,CAACH,cAAc,CAACc,gBAAf,CAAgC;QACrCC,MAAM,EAAE,SAD6B;QAErCC,KAAK,EAAE,UAF8B;QAGrCC,OAAO,EAAE;MAH4B,CAAhC,CAAD,CAAR;IAMH,CATD,CASE,OAAOJ,KAAP,EAAc;MACZV,QAAQ,CAACH,cAAc,CAACc,gBAAf,CAAgC;QACrCC,MAAM,EAAE,OAD6B;QAErCC,KAAK,EAAE,QAF8B;QAGrCC,OAAO,EAAE;MAH4B,CAAhC,CAAD,CAAR;IAKH;EACJ,CAxCD;AAyCH,CA1CM"},"metadata":{},"sourceType":"module"}